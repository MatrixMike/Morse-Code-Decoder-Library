#ifndef MorseCodeAlphabet_h
#define MorseCodeAlphabet_h

// Indexes are referenced by binary vailues that are laied out as follows:
// MSB values (starting at index 5) are 1:1 with the morse code "dits" and "dahs" (0 = '.' or "dit", 1 = '-' or "dah")
// The code is translated to binary directly, and then the remaining LSBs are set to the opposite of the last (LSB) of the code.
// For example, the code -.-. would become 1010, but then we append 11 (1 is the opposite of the last bit, 0)
// to finish off all six bits, with a final number of 101011. This is so each code stream can have its own unique index.
// We are ONLY concerned with bits 0-5, making the array size 64. Bits 6 and 7 will ALWAYS be 0.
// Morse code officially only handles the 26 letters of the alphabet, and digits 0-9, but I added some extra symbols in the empty spaces.
// These could be changed to whatever you want.
const char morseCodeInternational[64] = {
    '+', // ......   000000 (0)
    '5', // .....    000001 (1)
    '4', // ....-    000010 (2)
    'H', // ....     000011 (3)
    'V', // ...-     000100 (4)
    '.', // ...-.    000101 (5)
    '3', // ...--    000110 (6)
    'S', // ...      000111 (7)
    'U', // ..-      001000 (8)
    '(', // ..-..    001001 (9)
    ')', // ..-.-    001010 (10)
    'F', // ..-.     001011 (11)
    '[', // ..--     001100 (12)
    ']', // ..--.    001101 (13)
    '2', // ..---    001110 (14)
    'I', // ..       001111 (15)
    'A', // .-       010000 (16)
    '{', // .-...    010001 (17)
    '}', // .-..-    010010 (18)
    'L', // .-..     010011 (19)
    ';', // .-.-     010100 (20)
    ':', // .-.-.    010101 (21)
    '\'', //.-.--    010110 (22)
    'R', // .-.      010111 (23)
    'W', // .--      011000 (24)
    '"', // .--..    011001 (25)
    ',', // .--.-    011010 (26)
    'P', // .--.     011011 (27)
    'J', // .---     011100 (28)
    '<', // .---.    011101 (29)
    '1', // .----    011110 (30)
    'E', // .        011111 (31)
    'T', // -        100000 (32)
    '6', // -....    100001 (33)
    '>', // -...-    100010 (34)
    'B', // -...     100011 (35)
    'X', // -..-     100100 (36)
    '!', // -..-.    100101 (37)
    '@', // -..--    100110 (38)
    'D', // -..      100111 (39)
    'K', // -.-      101000 (40)
    '#', // -.-..    101001 (41)
    '$', // -.-.-    101010 (42)
    'C', // -.-.     101011 (43)
    'Y', // -.--     101100 (44)
    '%', // -.--.    101101 (45)
    '^', // -.---    101110 (46)
    'N', // -.       101111 (47)
    'M', // --       110000 (48)
    '7', // --...    110001 (49)
    '&', // --..-    110010 (50)
    'Z', // --..     110011 (51)
    'Q', // --.-     110100 (52)
    '*', // --.-.    110101 (53)
    '?', // --.--    110110 (54)
    'G', // --.      110111 (55)
    'O', // ---      111000 (56)
    '8', // ---..    111001 (57)
    '/', // ---.-    111010 (58)
    ' ', // ---.     111011 (59)
    '=', // ----     111100 (60)
    '9', // ----.    111101 (61)
    '0', // -----    111110 (62)
    '-'  // ------   111111 (63)
};
// Keyboard characters not accounted for: | \ _ ~  `

#endif